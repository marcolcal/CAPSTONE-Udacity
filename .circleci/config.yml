version: 2.1
orbs:
  python: circleci/python@2.0.3
  heroku: circleci/heroku@1.2.6
commands:
  destroy-cluster:
    description: destroy cluster if needed
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: install kubectl 
          when: on_fail
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            echo "Destroying environment: <<parameters.workflowid>> "
      - run:
          name: destroy cluster
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflowid>> "
            eksctl delete -f cluster clusters/cluster.yml --region=us-east-1
  
  describe-cluster:
    description: describe cluster 
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl utils describe-stacks -f cluster clusters/cluster.yml --region=us-east-1

  cluster-status:
    description: get cluster status
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl get cluster -f cluster clusters/cluster.yml --region=us-east-1

jobs:
  build_and_test: # this can be any name you choose
    executor: python/default # use the default executor defined within the orb
    steps:
      - checkout # checkout source code
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: python -m pytest
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  lint:
    - image: macOS-latest
    steps:
      - checkout 
      - name: Run hadolint
        run: |
          brew install hadolint
          hadolint ./Dockerfile | tee -a hadolint_lint.txt
          lintErrors=$(stat -f%z hadolint_lint.txt)
          if [ "$lintErrors" -gt "0" ]; then
              echo "Errors have been found, please see below"
              cat hadolint_lint.txt
              exit 1
          else
              echo "There are no erros found on Dockerfile!!"
          fi
            
  build:
    docker:
    - image: python:3.7.3-stretch
      auth:
        username: marcolcal
        password: $DOCKER_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys: deployed-1
      - run: 
          name: "setting up env"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      #- save_cache:
      #- paths:
          #- venv
  
          

#########LETS-
workflows: 
  default:
    jobs:
      - build_and_test
      - build
      - lint
      

 
      #- deploycluster:
      #    requires: [buildcontainer]
      #- pod-launcher:
      #    requires: [deploycluster]