version: 2.1
orbs:
  python: circleci/python@2.0.3
  heroku: circleci/heroku@1.2.6
commands:
  destroy-cluster:
    description: destroy cluster if needed
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - run:
          name: install kubectl 
          #when: on_fail
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            echo "Destroying environment: <<parameters.workflowid>> for $MY_PROJECT_NAME "
            eksctl delete cluster --region=${AWS_DEFAULT_REGION} --name=capstone-cluster #--profile udacity
      - run:
          name: Message for destrying the cluster
          #when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflowid>> "
            
  
  describe-cluster:
    description: describe cluster 
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - run:
          name: "eksctl --help output"
          command: eksctl --help
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl utils describe-stacks --region=${AWS_DEFAULT_REGION} --cluster=capstone-cluster

  cluster-status:
    description: get cluster status
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl get cluster --name=capstone-cluster --region=${AWS_DEFAULT_REGION}

jobs:
  lint:
    docker:
      - image: python:3.7.14
    steps:
      - checkout
      - run: python --version
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      #- setup_remote_docker:
      #    version: 20.10.14
      #    docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            python3 -m venv .capstone
            . .capstone/bin/activate
            make install
      - save_cache:
          paths:
            - ./capstone  # TODO: Include in cache the "bin" directory
          key: v1-{{ .Branch }}-{{ epoch }}
      - run:
          name: Test linting
          command: |
            python3 -m venv .capstone
            . .capstone/bin/activate
            make install
            # Install hadolint
            pip --version
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - run:
          name: Get the hadolint version
          command: |
            hadolint --version
      - run:
          name: Whereis and install pylint
          command: |
            whereis pylint
            pip install pylint
      - run:
          name: Run lint
          shell: /bin/bash
          command: |
            . .capstone/bin/activate
            echo "We will be back"
            make lint
            #hadolint Dockerfile || true
            #pylint --disable=R,C,W1203,W1202 app.py    
  build:
    docker:
    - image: cimg/go:1.17
      auth:
        username: marcolcal
        password: $DOCKER_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: 
          name: "building the docker image"
          command: |
            touch ".env"
            echo DOCKER_USERNAME="marcolcal" >> ".env"
            #echo DOCKER_PASSWORD=$DOCKER_PASSWORD >> ".env"
            echo PROJECT_NAME="udacity-capstone2022"  >> ".env"
            echo IMAGE_NAME="my-blue-image" >> ".env"
            source ".env"
            docker build -t $IMAGE_NAME .
            docker image tag $IMAGE_NAME $DOCKER_USERNAME/$IMAGE_NAME:v1
            docker login -u $DOCKER_USERNAME -p ${DOCKER_PASSWORD}
            docker push $DOCKER_USERNAME/$IMAGE_NAME:v1
      - save_cache:
          key: v1-{{ .Branch }}
          paths:
            - ./venv

  deployekscluster:
    docker:
      - image: cimg/aws:2022.09
    working_directory: ~/tmp  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run: 
          name: "updating awscli to latest"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            #sudo ./aws/install
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            which aws
      - run: 
          name: "Installing eksctl"
          command: |
            curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz | tar -xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run: 
          name: "Installing Kubectl"
          command: |  
            ###INstall kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            ##To validate binay
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            ##Install it
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            # and then append (or prepend) ~/.local/bin to $PATH
            kubectl version --client
            #Or use this for detailed view of version:
            kubectl version --client --output=yaml    
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - run: 
          name: "Creating cluster"
          command: | 
            aws sts get-caller-identity
            #eksctl create cluster --name=$MY_PROJECT_NAME --region=us-east-1 #--profile udacity
            eksctl create cluster -f ./.circleci/clusters/cluster.yml
            #/usr/local/bin/aws  eksctl get cluster --name=cluster-in-existing-vpc --region=${AWS_DEFAULT_REGION} --profile udacity
            #if [ $? != 0 ]; then
            #  eksctl create cluster --name --region=${AWS_DEFAULT_REGION} --profile default;      
            #  else
            #    exit 0;            
            #fi
          no_output_timeout: 30m
      - destroy-cluster
  smoke-testing-cluster:
    docker:
      - image: cimg/aws:2022.09
    working_directory: ~/tmp  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run: 
          name: "Installing eksctl"
          command: |
            curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz | tar -xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - describe-cluster
      - cluster-status
  deploy-app:
    docker:
      - image: cimg/aws:2022.09
    working_directory: ~/tmp  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run: 
          name: "updating awscli to latest"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            #sudo ./aws/install
            sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
            which aws
      - run: 
          name: "Installing eksctl"
          command: |
            curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz | tar -xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - run: 
          name: "Installing Kubectl"
          command: |  
            ###INstall kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            ##To validate binay
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            ##Install it
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            # and then append (or prepend) ~/.local/bin to $PATH
            kubectl version --client
            #Or use this for detailed view of version:
            kubectl version --client --output=yaml
      - describe-cluster
      - cluster-status
      - run:
          name: getting the aws version
          command: |
            aws --version
      - run:
          name: getting aws user identity
          command: |
            aws sts get-caller-identity
      - run:
          name: create the kubeconfig
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name capstone-cluster
      - run:
          name: testing configuration
          command: |
            kubectl get svc
      - run:
          name: deploy App/container
          command: |
            kubectl get nodes #--profile udacity
            #kubectl create deploy $MY_PROJECT_NAME --image=marcolcal/python-hello:v1.0.0  
            kubectl get deploy,rs,svc,pods   
            #kubectl port-forward pod/python-helloworld-84857d9565-2598m --address 0.0.0.0 5000:5000
            kubectl apply -f .circleci/clusters/green-pod.yml
            kubectl apply -f .circleci/clusters/services.yml
            kubectl apply -f .circleci/clusters/traffic.yml
  get-pod:
    docker:
      - image: cimg/aws:2022.09
    working_directory: ~/tmp  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run: 
          name: "Installing eksctl"
          command: |
            curl --silent --location https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz | tar -xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: "Setup custom environment variables"
          command: echo 'export MY_PROJECT_NAME="Capstone-Project"' >> "$BASH_ENV"
      - run: 
          name: "getting kubectl"
          command: |
            ###INstall kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            ##To validate binay
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            ##Install it
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            chmod +x kubectl
            mkdir -p ~/.local/bin
            mv ./kubectl ~/.local/bin/kubectl
            # and then append (or prepend) ~/.local/bin to $PATH
            kubectl version --client
            #Or use this for detailed view of version:
            kubectl version --client --output=yaml
      - describe-cluster
      - cluster-status
      - run:
          name: getting the aws version
          command: |
            aws --version
      - run:
          name: getting taws user identity
          command: |
            aws sts get-caller-identity
      - run:
          name: create the kubeconfig and update
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name capstone-cluster
      - run:
          name: kubectl get stuff
          command: |
            kubectl get svc
            kubectl get pods
      - run:
          name: Get PODs info
          command: |
            kubectl get pods -o wide
      - run:
          name: Get pods with namespaces
          command: |
            kubectl get pods --all-namespaces -o wide
      - run:
          name: Get pods with namespaces
          command: |
            echo "Hello World not working yet????"
            #kubectl port-forward pod/udacity-capstone-app-8448f9d578-cb5qx --address 0.0.0.0 5000:5000      

  destroy-eks:
    docker:
      - image: cimg/aws:2022.09
    working_directory: ~/tmp  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - destroy-cluster 

########
#########LETS-
workflows: 
  default:
    jobs:
      #- lint
      #- build:
      #    requires: 
      #      - lint 
      #- deployekscluster:
      #    requires: 
      #      - build 
      #- smoke-testing-cluster
      #    #requires: 
      #    #  - deployekscluster 
      #- deploy-app:
      #    requires: 
      #      - smoke-testing-cluster
      #- get-pod:
      #    requires: 
      #      - deploy-app
      - destroy-eks
      #- deploycluster:
      #    requires: [buildcontainer]
      #- pod-launcher:
      #    requires: [deploycluster]