version: 2.1
orbs:
  python: circleci/python@2.0.3
  heroku: circleci/heroku@1.2.6
commands:
  destroy-cluster:
    description: destroy cluster if needed
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: install kubectl 
          when: on_fail
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            echo "Destroying environment: <<parameters.workflowid>> "
      - run:
          name: destroy cluster
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflowid>> "
            eksctl delete -f cluster clusters/cluster.yml --region=us-east-1
  
  describe-cluster:
    description: describe cluster 
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl utils describe-stacks -f cluster clusters/cluster.yml --region=us-east-1

  cluster-status:
    description: get cluster status
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: describing the cluster
          command: |
            echo "getting cluster info"
            eksctl get cluster -f cluster clusters/cluster.yml --region=us-east-1

jobs:
  lint:
    docker:
      - image: python:3.7.14
    steps:
      - checkout
      - run: python --version
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run:
          name: Install dependencies
          command: |
            python3 -m venv .capstone
            . .capstone/bin/activate
            make install
      - save_cache:
          paths:
            - ./capstone  # TODO: Include in cache the "bin" directory
          key: v1-{{ .Branch }}-{{ epoch }}
      - run:
          name: Run lint
          command: |
            # Install hadolint
            pip --version
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
            #make lint    
  build:
    docker:
    - image: cimg/go:1.17
      auth:
        username: marcolcal
        password: $DOCKER_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: 
          name: "building the docker image"
          command: |
            touch ".env"
            echo DOCKER_USERNAME="marcolcal" >> ".env"
            echo DOCKER_PASSWORD=$DOCKER_PASSWORD >> ".env"
            echo IMAGE_NAME="my-blue-image" >> ".env"
            source ".env"
            docker build -t ${IMAGE_NAME} .
            docker image tag $IMAGE_NAME marcolcal/${IMAGE_NAME}:v1
            echo $DOCKER_PASSWORD | docker login -u ${DOCKER_USERNAME} -p --password-stdin
            docker push marcolcal/${IMAGE_NAME}
      - save_cache:
          key: v1-{{ .Branch }}
          paths:
            - ./venv
  
          

#########LETS-
workflows: 
  default:
    jobs:
      - build
      - lint
      

 
      #- deploycluster:
      #    requires: [buildcontainer]
      #- pod-launcher:
      #    requires: [deploycluster]